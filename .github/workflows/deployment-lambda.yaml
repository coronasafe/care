name: Lambda Deployment
on:
  pull_request:
    branches:
      - devops/lambda-changes
    paths-ignore:
      - "docs/**"
env:
  POSTGRES_DB: preview_${{ github.event.pull_request.number }}
jobs:

  create-db:
    name: Create new database
    runs-on: ubuntu-latest
    environment:
      name: care-preview
    steps:
      - uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Create new database
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        run: |
          # Check if the database already exists
          DATABASE_EXISTS=$(echo "SELECT 1 FROM pg_database WHERE datname='${POSTGRES_DB}'" | \
              PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -w -tA | \
              xargs)
          if [ "${DATABASE_EXISTS}" = "1" ]; then
            echo "Database already exists, skipping creation"
          else
            echo "Database doesn't exist, creating"
            # Create the database
            echo "CREATE DATABASE ${POSTGRES_DB};" | \
              PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -w
          fi

  build-image:
    name: Build & Push Staging to container registries
    runs-on: ubuntu-latest
    needs: create-db
    environment:
      name: care-preview
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-south-1
#
      - name: Login to AWS ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Login to Amazon ECR Public
#        id: login-ecr-public
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          registry-type: public

#      - name: Login to Public ECR
#        uses: docker/login-action@v2
#        with:
#          registry: public.ecr.aws
#          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        env:
#          AWS_REGION: ap-south-1

      - name: Build & Push image

        run: |
          docker build \
            --build-arg POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            --build-arg POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_DB=${{ env.POSTGRES_DB }} \
            --build-arg POSTGIS_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:5432/${{ env.POSTGRES_DB }} \
            --build-arg DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} \
            --build-arg DJANGO_ADMIN_URL=${{ secrets.DJANGO_ADMIN_URL }} \
            -t ghcr.io/${{ github.repository }}:lambda-${{ github.event.pull_request.number }} \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/care:lambda-${{ github.event.pull_request.number }} \
            -f lambda_Dockerfile \
            .

          docker push ghcr.io/${{ github.repository }}:lambda-${{ github.event.pull_request.number }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/care:lambda-${{ github.event.pull_request.number }}

  create-function:
    runs-on: ubuntu-latest
    needs: build-image
    environment:
      name: care-preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Create Lambda function from Docker image
        run: |
          pip3 install --upgrade --user awscli
          if aws lambda get-function --function-name preview_${{ github.event.pull_request.number }} >/dev/null 2>&1; then
            aws lambda update-function-code \
              --function-name preview_${{ github.event.pull_request.number }} \
              --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/care:lambda-${{ github.event.pull_request.number }} \
              --publish
          else
            aws lambda create-function \
              --function-name preview_${{ github.event.pull_request.number }} \
              --package-type Image \
              --code ImageUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/care:lambda-${{ github.event.pull_request.number }} \
              --memory-size 256 \
              --timeout 30 \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambdaRole \
              --environment "Variables={POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}, \
                  POSTGRES_DB=${{ env.POSTGRES_DB }}, \
                  POSTGRES_USER=${{ secrets.POSTGRES_USER }}, \
                  POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}, \
                  POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}, \
                  DJANGO_SETTINGS_MODULE=config.settings.lambda, \
                  DJANGO_SECURE_SSL_REDIRECT=False, \
                  USE_S3=True, \
                  CSRF_TRUSTED_ORIGINS='[\"*\"]', \
                  DJANGO_ALLOWED_HOSTS='[\"*\"]', \
                  RATE_LIMIT=5/10m, \
                  MAINTANANCE_MODE=0, \
                  DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}, \
                  NEWRELIC_INI='', \
                  POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}, \
                  CELERY_BROKER_URL=redis://redis:6379/0, \
                  REDIS_URL=redis://redis:6379/0, \
                  DJANGO_ADMIN_URL=${{ secrets.DJANGO_ADMIN_URL }}, \
                  POSTGIS_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:5432/${{ env.POSTGRES_DB }}, \
                  EMAIL_HOST=${{ secrets.EMAIL_HOST }}, \
                  EMAIL_USER=${{ secrets.EMAIL_USER }}, \
                  EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}, \
                  SENTRY_DSN=${{ secrets.SENTRY_DSN }}, \
                  SENTRY_ENVIRONMENT=preview, \
                  FILE_UPLOAD_BUCKET=${{ secrets.FILE_UPLOAD_BUCKET }}, \
                  FILE_UPLOAD_KEY=${{ secrets.AWS_ACCESS_KEY_ID }}, \
                  FILE_UPLOAD_SECRET=${{ secrets.AWS_SECRET_ACCESS_KEY }}, \
                  AUDIT_LOG_ENABLED=1, \
                  GOOGLE_RECAPTCHA_SITE_KEY=${{ secrets.GOOGLE_RECAPTCHA_SITE_KEY }}, \
                  GOOGLE_RECAPTCHA_SECRET_KEY=${{ secrets.GOOGLE_RECAPTCHA_SECRET_KEY }}, \
                  VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}, \
                  VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}, \
                  AWS_STORAGE_BUCKET_NAME=care-preview, \
                  FACILITY_S3_BUCKET=${{ secrets.FACILITY_S3_BUCKET }}, \
                  FACILITY_S3_KEY=${{ secrets.AWS_ACCESS_KEY_ID }}, \
                  FACILITY_S3_SECRET=${{ secrets.AWS_SECRET_ACCESS_KEY }}, \
                  FACILITY_S3_BUCKET_ENDPOINT=https://${{ secrets.FACILITY_S3_BUCKET }}.s3.amazonaws.com \
              }"
          fi
