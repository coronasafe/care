name: Lambda Deployment

on:
  pull_request:
    branches:
      - devops/lambda-changes
    paths-ignore:
      - "docs/**"
jobs:
  create-db:
    name: Create new database
    runs-on: ubuntu-latest
    environment:
      name: care-preview
    steps:
      - uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Create new database
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          # Check if the database already exists
          DATABASE_EXISTS=$(echo "SELECT 1 FROM pg_database WHERE datname='preview_${{ github.events.pull_request.number }}'" | \
              PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -w -tA | \
              xargs)
          if [ "${DATABASE_EXISTS}" = "1" ]; then
            echo "Database already exists, skipping creation"
          else
            echo "Database doesn't exist, creating"
            # Create the database
            echo "CREATE DATABASE preview_${{ github.events.pull_request.number }};" | \
              PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -w
          fi

  build-image:
    name: Build & Push Staging to container registries
    runs-on: ubuntu-latest
    needs: create-db
    environment:
      name: care-preview
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
          docker build
            --build-arg POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            --build-arg POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_DB=preview_${{ github.events.pull_request.number }} \
            --build-arg POSTGIS_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:5432/preview_${{ github.events.pull_request.number }} \
            -t ghcr.io/${{ github.repository }}:lambda-${{ github.event.pull_request.number }} -f lambda_Dockerfile .

          docker push ghcr.io/${{ github.repository }}:lambda-${{ github.event.pull_request.number }}


