# Generated by Django 4.2.2 on 2023-07-06 16:58

import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.contrib.postgres.search import SearchVector
from django.db import migrations


def compute_search_vector(apps, schema_editor):
    MedibaseMedicine = apps.get_model("facility", "MedibaseMedicine")
    MedibaseMedicine.objects.update(
        search_vector=(
            SearchVector("name", weight="A")
            + SearchVector("generic", weight="B")
            + SearchVector("company", weight="C")
            + SearchVector("cims_class", weight="D")
            + SearchVector("contents", weight="D")
        )
    )


class Migration(migrations.Migration):
    dependencies = [
        ("facility", "0370_merge_20230705_1500"),
    ]
    operations = [
        migrations.AddField(
            model_name="medibasemedicine",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name="medibasemedicine",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="medibase_search_vector_idx"
            ),
        ),
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER medibase_search_vector_trigger
            BEFORE INSERT OR UPDATE OF name, generic, company, cims_class, contents, search_vector
            ON facility_medibasemedicine
            FOR EACH ROW EXECUTE PROCEDURE
            tsvector_update_trigger(
                search_vector, 'pg_catalog.english', name, generic, company, cims_class, contents
            );
            UPDATE facility_medibasemedicine SET search_vector = NULL;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS medibase_search_vector_trigger
            ON facility_medibasemedicine;
            """,
        ),
        migrations.RunPython(
            compute_search_vector, reverse_code=migrations.RunPython.noop
        ),
    ]
